# ##############################################
# ==============================================
# * import block * # :
# ==============================================
from i2c_rpi_driver import *


# ==============================================
# ==============================================
# * Vars block * # :
# ==============================================


# ==============================================
# ==============================================
# * Commands list block * # :
# ==============================================
DEV_ENCODER     = 20
CMD_GETDATA     = 10
# ----------------------------------------------
STT_NOERROR     = 0
STT_READY       = 100


# ==============================================
# ==============================================
# * class Ecoder * # :
# ** ======= class =============================:
class Encoder:


# ----------------------------------------------
# ** def __init__ : 
# ----------------------------------------------
   def __init__(self, stm):
      self._stm = stm


# ----------------------------------------------
# ** def get_data() : 
#  ----------------------------------------------:
   def get_data(self): 
      self.cmd_data()
      while not self.is_ready():
         sleep(0.1)
      sleep(0.01)
      return self.msg_data()


#  ----------------------------------------------:
# ** def cmd_data(self): : 
#  ----------------------------------------------:
   def cmd_data(self): 
      self._stm.write_cmd_arg(DEV_ENCODER, CMD_GETDATA, [0, 0])


#  ----------------------------------------------:
# ** def msg_data(self): : 
#  ----------------------------------------------:
   def msg_data(self): 
      return self._stm.msg_get_one()


#  ----------------------------------------------:
# ** def status : 
#  ----------------------------------------------:
   def status(self, code): 
      msg = None
      while msg == None:
         try:
            msg = self._stm.msg_list_size()
         except e:
            print("time out error", e)
         # else:
         #    msg = 0
      return msg


#  ----------------------------------------------:
# ** def is_ready : 
#  ----------------------------------------------:
   def is_ready(self): 
      r = self.status(STT_READY)
      if r == None: return False
      else:
         print("Step motor is ready")
         print("r\msg = ", r)
         return True


#  ----------------------------------------------:
# ** ============================================
# * ############################################ :
